{% if "POST" in http_methods or "PUT" in http_methods or "GET" in http_methods or "GET ALL" in http_methods %}
use crate::models::{{ resource_name | snake_case }}::{Model as {{ resource_name | pascal_case }}};
{% endif %}

use crate::repositories::{{ resource_name | snake_case }}_repository::{{ resource_name | pascal_case }}Repository;
use std::sync::Arc;
use standard_lib::errors::ApiError;
{% if "POST" in http_methods %}
use crate::payloads::{{ resource_name | snake_case }}_payloads::{Create{{ resource_name | pascal_case }}Payload};
{% endif %}
{% if "PUT" in http_methods %}
use crate::payloads::{{ resource_name | snake_case }}_payloads::{Update{{ resource_name | pascal_case }}Payload};
{% endif %}
{% if "GET" in http_methods or "DELETE" in http_methods %}
use sea_orm::prelude::Uuid;
{% endif %}

{# {{ resource_name | plural }} #}
#[derive(Clone)]
pub struct {{ resource_name | pascal_case }}Manager {
    repository: Arc<dyn {{ resource_name | pascal_case }}Repository>,
}

impl {{ resource_name | pascal_case }}Manager {
    pub fn new(repository: Arc<dyn {{ resource_name | pascal_case }}Repository>) -> Self {
        {{ resource_name | pascal_case }}Manager { repository }
    }

{% if "POST" in http_methods %}
    pub async fn create(
        &self,
        payload: Create{{ resource_name | pascal_case }}Payload
    ) -> Result<{{ resource_name | pascal_case }}, ApiError> {
        let new_{{ resource_name | snake_case }} = {{ resource_name | pascal_case }}::from(payload);

        self.repository.create(new_{{ resource_name | snake_case }}).await.map_err(ApiError::from)
    }

{% endif %}

{% if "GET ALL" in http_methods %}
    pub async fn find(&self) -> Result<Vec<{{ resource_name | pascal_case }}>, ApiError> {
        self.repository.find().await.map_err(ApiError::from)
    }

{% endif %}

{% if "GET" in http_methods %}
    pub async fn find_one(
        &self,
        uuid_{{ resource_name | snake_case }}: String,
    ) -> Result<{{ resource_name | pascal_case }}, ApiError> {
        let uuid = Uuid::parse_str(&uuid_{{ resource_name | snake_case }}).unwrap_or(Uuid::nil());
        self.repository
            .find_by_uuid(uuid).await.map_err(ApiError::from)
    }
{% endif %}

{% if "PUT" in http_methods %}
    pub async fn update(
        &self,
        uuid: String,
        payload: Update{{ resource_name | pascal_case }}Payload
    ) -> Result<{{ resource_name | pascal_case }}, ApiError> {
        self.repository
            .update(uuid, payload).await.map_err(ApiError::from)
    }
{% endif %}

{% if "DELETE" in http_methods %}
    pub async fn delete(
        &self,
        uuid_{{ resource_name | snake_case }}: String,
    ) -> Result<String, ApiError> {
        let uuid = Uuid::parse_str(&uuid_{{ resource_name | snake_case }}).unwrap_or(Uuid::nil());
        self.repository
            .delete(uuid).await.map_err(ApiError::from)
    }
{% endif %}
}